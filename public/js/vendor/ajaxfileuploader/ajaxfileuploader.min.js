/**
 * ajaxfileuploader.js
 * @homepage:       https://github.com/xiaohuilam/ajaxfileuploader.js
 * @author:         xiaohui.lam(xiaohui.lam#icloud.com)
 * @description:    ajax_upload_file
 * @usage:          see: https://gist.githubusercontent.com/xiaohuilam/2d8959ee8ed31881b6d414bfa593851d/raw/48759ca94d194043eaffd9073dc8b732bdeaab9c/ajaxfileuploader-usage.js
 */
(function(p, b) {
    "undefined" == typeof b.handleError && (b.handleError = function(a) {
        return !1
    }
    );
    b.extend({
        createUploadIframe: function(a, c) {
            var d = "jUploadFrame" + a
              , f = '<iframe id="' + d + '" name="' + d + '" style="position:absolute; top:-9999px; left:-9999px"';
            p.ActiveXObject && ("boolean" == typeof c ? f += ' src="javascript:false"' : "string" == typeof c && (f += ' src="' + c + '"'));
            f += " />";
            b(document.body).append(b(f));
            return b("#" + d).get(0)
        },
        createUploadForm: function(a, c, d) {
            var f = parseInt(999999999 * Math.random()).toString()
              , e = "jUploadForm" + a;
            a = "jUploadFile" + a;
            e = b('<form  action="" method="POST" name="' + e + '" id="' + e + '" enctype="multipart/form-data"></form>');
            if (d)
                for (var g in d)
                    v = d[g],
                    "function" == typeof d[g] && (v = d[g](f)),
                    b('<input type="hidden" name="' + g + '" value="' + v + '" />').appendTo(e);
            c = b("#" + c);
            d = b(c).clone();
            b(c).attr("id", a);
            b(c).before(d);
            b(c).appendTo(e);
            b(e).css("position", "absolute");
            b(e).css("top", "-1200px");
            b(e).css("left", "-1200px");
            b(document.body).append(b(e));
            return e
        },
        ajaxFileUpload: function(a, c, d) {
            a = b.extend({}, b.ajaxSettings, a);
            "undefined" === a.filedName && (a.filedName = a.fileElementId);
            var f = (new Date).getTime().toString() + parseInt(9999999 * Math.random()).toString()
              , e = "jUploadFrame" + f
              , g = "jUploadForm" + f
              , l = !1;
            if ("undefined" === typeof c || "undefined" === typeof c.target || "undefined" === typeof c.target.files) {
                var h = b.createUploadForm(f, a.fileElementId, "undefined" == typeof a.data ? !1 : a.data);
                b.createUploadIframe(f, a.secureuri);
                a.global && !b.active++ && b.event.trigger("ajaxStart");
                var k = {};
                a.global && b.event.trigger("ajaxSend", [k, a]);
                var q = function(c) {
                    var d = document.getElementById(e);
                    try {
                        d.contentWindow ? (k.responseText = d.contentWindow.document.body ? d.contentWindow.document.body.innerHTML : null,
                        k.responseXML = d.contentWindow.document.XMLDocument ? d.contentWindow.document.XMLDocument : d.contentWindow.document) : d.contentDocument && (k.responseText = d.contentDocument.document.body ? d.contentDocument.document.body.innerHTML : null,
                        k.responseXML = d.contentDocument.document.XMLDocument ? d.contentDocument.document.XMLDocument : d.contentDocument.document)
                    } catch (m) {
                        b.handleError(a, k, null, m)
                    }
                    if ((text = b("<div>" + k.responseText + "</div>").text()) || "timeout" == c) {
                        l = !0;
                        var f;
                        try {
                            f = "timeout" != c ? "success" : "error",
                            "error" != f ? (b.uploadHttpData(text, a.dataType),
                            a.success && a.success(text, g, a.srcElement),
                            a.global && b.event.trigger("ajaxSuccess", [text, a])) : b.handleError(a, text, f)
                        } catch (m) {
                            b.handleError(a, text, f, m)
                        }
                        a.global && b.event.trigger("ajaxComplete", [text, a]);
                        a.global && !--b.active && b.event.trigger("ajaxStop");
                        a.complete && a.complete(text, f);
                        b(d).unbind();
                        setTimeout(function() {
                            try {
                                b(d).remove(),
                                b(h).remove()
                            } catch (m) {
                                b.handleError(a, text, null, m)
                            }
                        }, 100);
                        text = null
                    }
                };
                0 < a.timeout && setTimeout(function() {
                    l || q("timeout")
                }, a.timeout)
            }
            try {
                if ("function" == typeof a.url && (a.url = a.url()),
                "function" == typeof a.data && (a.data = a.data()),
                "undefined" !== typeof c && "undefined" !== typeof c.target && "undefined" !== typeof c.target.files)
                    for (i = 0; i < c.target.files.length; i++) {
                        var p = parseInt(999999999 * Math.random()).toString();
                        if (nonce = parseInt(99999999 * Math.random()),
                        a.beforeUpload(c.target.files[i], nonce, a.srcElement),
                        c.target.files[i].size > a.maxSize || c.target.files[i].size < a.minSize)
                            a.error(c.target.files[i], nonce, "Filesize Limit exceeded!", a.srcElement);
                        else {
                            var n = new FormData;
                            for (j in a.data)
                                v = a.data[j],
                                "function" == typeof a.data[j] && (v = a.data[j](p)),
                                n.append(j, v);
                            n.append("file", c.target.files[i]);
                            xmlHTTP = new XMLHttpRequest;
                            xmlHTTP.nonce = nonce;
                            xmlHTTP.file = c.target.files[i];
                            xmlHTTP.open("POST", a.url);
                            xmlHTTP.onreadystatechange = function(b) {
                                if (4 != b.target.readyState)
                                    return !1;
                                try {
                                    eval("var json=" + b.target.responseText)
                                } catch (t) {
                                    return a.error(this.file, b.target.nonce, "Server Error!", a.srcElement),
                                    !1
                                }
                                "undefined" !== typeof a.success && a.success(json, b.target.nonce, a.srcElement);
                                delete json
                            }
                            ;
                            xmlHTTP.send(n);
                            delete n
                        }
                    }
                else
                    a.beforeUpload({
                        name: d.split("\\\\").reverse()[0]
                    }, g, a.srcElement),
                    h = b("#" + g),
                    b(h).find('input[type="file"]').attr("name", a.filedName),
                    b(h).attr("action", a.url),
                    b(h).attr("method", "POST"),
                    b(h).attr("target", e),
                    h.encoding ? b(h).attr("encoding", "multipart/form-data") : b(h).attr("enctype", "multipart/form-data"),
                    b(h).submit()
            } catch (r) {
                b.handleError(a, k, null, r)
            }
            b("#" + e).load(q);
            return {
                abort: function() {}
            }
        },
        uploadHttpData: function(a, c) {
            var d;
            d = "xml" != c && c ? a.responseText : a.responseXML;
            "script" == c && b.globalEval(d);
            "json" == c && eval("data = " + d);
            "html" == c && b("<div>").html(d).evalScripts();
            return d
        }
    });
    b.fn.extend({
        uploader: function(a) {
            var c = {
                url: null,
                secureuri: null,
                data: null,
                fileElementId: null,
                filedName: null,
                dataType: "json",
                minSize: 1,
                maxSize: 2097152,
                success: function(b, a, c) {},
                beforeUpload: function(b, a) {},
                allowExt: {
                    jpg: 1,
                    png: 1,
                    gif: 1,
                    jpeg: 1,
                    bmp: 1,
                    ico: 1,
                    webp: 1
                },
                paste: !0
            };
            b.extend(c, a);
            that = this;
            b(document).ready(function() {
                b(that).on("change", function(a) {
                    try {
                        if (that_ext = b(that).val().split(".").reverse()[0],
                        0 < b(that).val().length && ("undefined" === typeof c.allowExt[that_ext] || 1 != c.allowExt[that_ext]))
                            return b(that).val(""),
                            alert("\u6b64\u7c7b\u6587\u4ef6\u4e0d\u5141\u8bb8\u4e0a\u4f20"),
                            !1
                    } catch (f) {
                    }
                    b.ajaxFileUpload({
                        url: c.url,
                        secureuri: c.secureuri,
                        data: c.data,
                        fileElementId: c.fileElementId,
                        filedName: c.filedName,
                        dataType: c.dataType,
                        minSize: c.minSize,
                        maxSize: c.maxSize,
                        allowExt: c.allowExt,
                        srcElement: b(a.target),
                        success: function(a, d, g) {
                            "string" === typeof a && (a = b.parseJSON(a));
                            if ("undefined" !== typeof c.success)
                                return c.success(a, d, g)
                        },
                        beforeUpload: function(a, b, d) {
                            if ("undefined" !== typeof c.beforeUpload)
                                return c.beforeUpload(a, b, d)
                        },
                        error: function(a, b, d, l) {
                            if ("undefined" !== typeof c.error)
                                return c.error(a, b, d, l)
                        }
                    }, a, b("undefined" !== typeof a.target ? a.target : a.srcElement).val())
                })
            });
            if (c.paste)
                b(that).on("paste", function(a) {
                    a = (a.clipboardData || a.originalEvent.clipboardData).items;
                    if (1 > a.length)
                        return !0;
                    blob = a[0].getAsFile();
                    if ("undefined" === typeof blob || null === blob || !blob)
                        return !0;

                    if('function' == typeof c.url) c.url = c.url();
                    if('function' == typeof c.data) c.data = c.data();
                    type = blob.type.replace("image/", "");
                    "jpeg" === type && (type = "jpg");
                    blob.name = "image." + type;
                    nonce = parseInt(99999999 * Math.random());
                    c.beforeUpload(blob, nonce);
                    (blob.size > c.maxSize || blob.size < c.minSize) && c.error(blob, nonce, "Filesize Limit exceeded!", b(this));
                    var d = new FormData;
                    for (j in c.data){
                        if('function' == typeof c.data[j]) c.data[j] = c.data[j](nonce);
                        d.append(j, c.data[j]);
                    }
                    d.append("file", blob, blob.name);
                    var e = new XMLHttpRequest;
                    e.nonce = nonce;
                    e.that = that;
                    e.c = c;
                    e.file = blob;
                    e.open("POST", c.url);
                    e.onreadystatechange = function(a) {
                        if (4 != a.target.readyState)
                            return !0;
                        try {
                            eval("var json=" + a.target.responseText)
                        } catch (l) {
                            return c.error(this.file, this.nonce, "Server Error!"),
                            !0
                        }
                        console.log(json);
                        console.log(a.target.c);
                        "undefined" !== typeof c.success && c.success(json, a.target.nonce, that);
                        delete json
                    }
                    ;
                    e.send(d);
                    delete d;
                    delete a;
                    delete blob;
                    delete nonce;
                    delete type
                })
        }
    })
})(window, jQuery);

